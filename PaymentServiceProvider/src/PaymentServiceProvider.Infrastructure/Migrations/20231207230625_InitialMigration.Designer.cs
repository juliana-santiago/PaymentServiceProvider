// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PaymentServiceProvider.Infrastructure.Persistence.Context;

#nullable disable

namespace PaymentServiceProvider.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20231207230625_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PaymentServiceProvider.Domain.Payables.Payable", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<short>("PayableTypeId")
                        .HasColumnType("smallint");

                    b.Property<Guid>("TransactionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Value")
                        .HasColumnType("money");

                    b.HasKey("Id");

                    b.HasIndex("PayableTypeId");

                    b.HasIndex("TransactionId")
                        .IsUnique();

                    b.ToTable("Payables", (string)null);
                });

            modelBuilder.Entity("PaymentServiceProvider.Domain.Payables.PayableType", b =>
                {
                    b.Property<short>("Id")
                        .HasColumnType("smallint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(40)")
                        .HasColumnName("Name");

                    b.Property<decimal>("Fee")
                        .HasColumnType("decimal(4,2)");

                    b.HasKey("Id");

                    b.ToTable("PayableTypes");
                });

            modelBuilder.Entity("PaymentServiceProvider.Domain.Transactions.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CardHolderName")
                        .IsRequired()
                        .HasColumnType("varchar(30)");

                    b.Property<string>("CardNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CodeCVC")
                        .IsRequired()
                        .HasColumnType("varchar(4)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime");

                    b.Property<short>("TransactionTypeId")
                        .HasColumnType("smallint");

                    b.Property<decimal>("Value")
                        .HasColumnType("money");

                    b.HasKey("Id");

                    b.HasIndex("TransactionTypeId");

                    b.ToTable("Transactions", (string)null);
                });

            modelBuilder.Entity("PaymentServiceProvider.Domain.Transactions.TransactionType", b =>
                {
                    b.Property<short>("Id")
                        .HasColumnType("smallint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(40)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("TransactionTypes");
                });

            modelBuilder.Entity("PaymentServiceProvider.Domain.Payables.Payable", b =>
                {
                    b.HasOne("PaymentServiceProvider.Domain.Payables.PayableType", "PayableType")
                        .WithMany()
                        .HasForeignKey("PayableTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PaymentServiceProvider.Domain.Transactions.Transaction", "Transaction")
                        .WithOne("Payable")
                        .HasForeignKey("PaymentServiceProvider.Domain.Payables.Payable", "TransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PayableType");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("PaymentServiceProvider.Domain.Transactions.Transaction", b =>
                {
                    b.HasOne("PaymentServiceProvider.Domain.Transactions.TransactionType", "TransactionType")
                        .WithMany()
                        .HasForeignKey("TransactionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TransactionType");
                });

            modelBuilder.Entity("PaymentServiceProvider.Domain.Transactions.Transaction", b =>
                {
                    b.Navigation("Payable")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
